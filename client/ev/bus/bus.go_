package bus

import (
	"errors"
	"github.com/gobwas/gws/client/ev"
)

type Handler struct {
	subscriptions map[string][]*Subscription
}

func NewHandler() *Handler {
	return &Handler{
		subscriptions: make(map[string][]*Subscription),
	}
}

func (h *Handler) Subscribe(s *Subscription) {
	h.subscriptions[s.topic] = append(h.subscriptions[s.topic], s)
}

func (h *Handler) Unsubscribe(s *Subscription) {
	for i, sub := range h.subscriptions[s.topic] {
		if sub == s {
			h.remove(s.topic, i)
			return
		}
	}
}

func (h *Handler) remove(topic string, i int) {
	subs := h.subscriptions[topic]
	last := len(subs) - 1
	copy(subs[:i], subs[i+1:])
	subs[last] = nil
	subs = subs[:last]

	if len(subs) == 0 {
		delete(h.subscriptions, topic)
	} else {
		h.subscriptions[topic] = subs
	}
}

func (h *Handler) Handle(loop *ev.Loop, data interface{}, cb ev.Callback) error {
	msg, ok := data.(*Message)
	if !ok {
		return errors.New("unexpected data")
	}

	loop.Request(ev.EventTypeAsync, nil, func(error, interface{}) {
		subs := h.subscriptions[msg.topic]
		for i := 0; i < len(subs); {
			sub := subs[i]
			sub.cb(nil, msg.data)
			if sub.once {
				h.remove(msg.topic, i)
			} else {
				i++
			}
		}
	})

	return nil
}

func (h *Handler) IsActive() bool {
	return len(h.subscriptions) > 0
}

type Message struct {
	topic string
	data  interface{}
}

func NewMessage(name string, data interface{}) *Message {
	return &Message{name, data}
}

type Subscription struct {
	active bool
	topic  string
	once   bool
	cb     ev.Callback
}

func NewSubscription(name string, once bool, cb ev.Callback) *Subscription {
	return &Subscription{true, name, once, cb}
}

func (s *Subscription) Cancel() {
	s.active = false
}
